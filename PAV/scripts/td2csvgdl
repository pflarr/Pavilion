#!/usr/bin/perl

#  ###################################################################
#
#  Disclaimer and Notice of Copyright 
#  ==================================
#
#  Copyright (c) 2015, Los Alamos National Security, LLC
#  All rights reserved.
#
#  Copyright 2015. Los Alamos National Security, LLC. 
#  This software was produced under U.S. Government contract 
#  DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), 
#  which is operated by Los Alamos National Security, LLC for 
#  the U.S. Department of Energy. The U.S. Government has rights 
#  to use, reproduce, and distribute this software.  NEITHER 
#  THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES 
#  ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY 
#  FOR THE USE OF THIS SOFTWARE.  If software is modified to 
#  produce derivative works, such modified software should be 
#  clearly marked, so as not to confuse it with the version 
#  available from LANL.
#
#  Additionally, redistribution and use in source and binary 
#  forms, with or without modification, are permitted provided 
#  that the following conditions are met:
#
#  1. Redistributions of source code must retain the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer. 
#  2. Redistributions in binary form must reproduce the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer in the documentation 
#     and/or other materials provided with the distribution. 
#  3. Neither the name of Los Alamos National Security, LLC, 
#     Los Alamos National Laboratory, LANL, the U.S. Government, 
#     nor the names of its contributors may be used to endorse 
#     or promote products derived from this software without 
#     specific prior written permission.
#   
#  THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC 
#  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
#  IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR CONTRIBUTORS 
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
#  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
#  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
#  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
#  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
#  OF SUCH DAMAGE.
#
#  ###################################################################


#
# This script will transforms logfile trenddata "<td>" into a global CSV results file. 
# td2csvgdl - trend data to csv global data log.

use File::Basename;
use Pod::Usage;
use Getopt::Std;

(my $prog = $0) =~ s/.*\///;

my %attr =
(
   RaiseError => 0,
   PrintError => 0,
   AutoCommit => 1
);

use strict;

use Getopt::Std;
our %opt;
&getopts("dh:", \%opt);

  # print help if requested
  if ( $opt{h}) { usage(); exit; }

  my $jlf = $ENV{'PV_JOB_RESULTS_LOG'};
  chomp $jlf;
  my $ofd = $ENV{'PV_RESULT_ROOT'};
  chomp $ofd;

  # read from the logfile
  open( LOG, "<$jlf") or die "$prog: Failed to open job log file $jlf, $!\n";

  my $hdr = "";
  my $resrecord = "";
  our $date = "";
  our $time = "";
  our $edate = "";
  our $etime = "";
  my $tn = "";
  my $mn = "";
  my $pl = "";
  my $nl = "";
  my $nc = "";
  my $nn = "";
  my $sn = "";
  my $job_id = "";
  my %td = ();
  my $td_name;
  my @td_names;
  my $td_val;
  my @td_vals;
  my $td_unit;
  my @td_units;
  my $td_list = "";
  my $results = "unknown";

  while( <LOG> ) {
#        print "DEBUGGING: input=$_\n";
#        chop( $_  );

      # extract target machine name
      if (/^<machine> /) {
        $mn = $';
        chomp $mn;
        next;
      }

      # extract target segment name
      if (/^<segName> /) {
        $sn = $';
        chomp $sn;
        next;
      }

      # extract test name
      if (/^<testName> /) {
        $tn = $';
        chomp $tn;
        next;
      }

      # extract PE (cores) name
      if (/^<npes> /) {
        $nc = $';
        chomp $nc;
        next;
      }

      # get job id to include in splunk data
      if ( /^<JobID> / ) {
	 $job_id = $';
         chomp $job_id;
	 next;
      } 

      # extract node list 
      if (/^<nodes> /) {
        $nl = $';
        chomp $nl;
        $nn++ while $nl =~ /\S+/g;
        $nl =~ s/\s+/,/g;
        next;
      }

      # extract the parameter list
      if (/^<params> /) {
        $pl = $';
        chomp $pl;
        $pl =~ s/\s+/__/g;
        next;
      }

      # get start time to use in splunk data 
      if( /^<start> / ) {
         my $start = $';
         chomp $start;
         $start =~ s/^\s+//;
         ($date, $time) = split("T", $start); 
         $time =~ s/-.*//;
         next;
      }

      # get end time to use in splunk data 
      if( /^<end> / ) {
         my $end = $';
         chomp $end;
         ($edate, $etime) = split("T", $end); 
         $etime =~ s/-.*//;
         $edate =~ s/^\s+//;
         next;
      }

      # get results  
      # save the first pass, unless a fail then save the first one of those 
      if (/<result\w{0,1}>\s*(.+)/){
         my $tmpStr = $1;
         $tmpStr =~ s/[,:].+$//; # remove any text after pass/fail
         if ($results =~ /unknown/) {
           $results = $tmpStr;
         }
         if ( ($tmpStr =~ /fail/i) && ( $results !~ /fail/i) ) {
           $results = $tmpStr;
         }
         chomp $results;
         next;
      }

      # process test specific data types
      #
      # <td> standard trend data which is formatted as "name value [units]"
      #    is included with the common data in the output record.
      #

      if ( /<td>\s+(.*)/ ) {
        $td_name = "";
        $td_val = "";
        $td_unit = "";

        my @td = split(" ", $1);
        $td_name = $td[0];
        $td_name =~ s/-/_/g; # no "-"s allowed in std. trend data
        $td_val = $td[1];
        $td_unit = $td[2];

        # add trend data names, values, and units to list, however skip duplicate names
        unless (exists $td{$td_name}) {
          push (@td_names, $td_name); 
          push (@td_vals, $td_val); 
          push (@td_units, $td_unit); 
          $td{$td_name} = 1;
        }
        next;
      }

    } 
    close( LOG );


    # Initialize new result csv file
    my $of = "test_results.csv";
    my $tf = $ofd . "/" . $of;
    unless (-e $tf) {
      $hdr = qq(StartDate,StartTime,EndDate,EndTime,TestName,JobId,SegmentName,NumNodes,NumCores,Params,Results,tdName,tdVal,tdUnits,Node\n);
      open( OFILE, ">$ofd/$of") or die "$prog: Failed to open $tn target data csv file, $!\n";
      print OFILE $hdr;
      close( OFILE );
    }

    # Update the csv file, one line per trend data entry 
    open( OFILE, ">>$ofd/$of") or die "$prog: Failed to open $tn target data csv file, $!\n";

    my $node_name;
    if ( $nn == 1 ) { 
      $node_name = $nl;
      $node_name =~ s/,$//;
    } else {
      $node_name = "multi";
    }

    my $tdn = "";
    my $tdv = "";
    my $tdu = "";
    if ( @td_names ) {
      my $i = 0;
      foreach (@td_names) {
        # a special case exists where the node name may be catenated to the trenddata name with a "+". In
        # this case separate the two parts and set the node name to the second part.
        my @parts = split(/\+/, $td_names[$i]);
        if ( scalar @parts == 2 ) {
          $tdn = $parts[0];
          $node_name = $parts[1]
        } else {
          $tdn = $td_names[$i];
        }
        $tdv = $td_vals[$i];
        $tdu = $td_units[$i];
        $resrecord = qq($date,$time,$edate,$etime,$tn,$job_id,$sn,$nn,$nc,"$pl",$results,$tdn,$tdv,$tdu,$node_name\n);
        print OFILE $resrecord;
        $i++;
      }
    } else {
      # just in case there were no trend data name/values
      $resrecord = qq($date,$time,$edate,$etime,$tn,$job_id,$sn,$nn,$nc,"$pl",$results,$tdn,$tdv,$tdu,"$node_name"\n);
      print OFILE $resrecord;
    }
    close( OFILE );


exit (0);

sub usage {

  print "\n\n";
  print <<usage_info;
usage: $prog [options] <log dir> 
          -d print debugging info 
          -h print this help screen
usage_info
  print "\n\n";
}

