#!/usr/bin/perl -w

#  ###################################################################
#
#  Disclaimer and Notice of Copyright 
#  ==================================
#
#  Copyright (c) 2013, Los Alamos National Security, LLC
#  All rights reserved.
#
#  Copyright 2013. Los Alamos National Security, LLC. 
#  This software was produced under U.S. Government contract 
#  DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), 
#  which is operated by Los Alamos National Security, LLC for 
#  the U.S. Department of Energy. The U.S. Government has rights 
#  to use, reproduce, and distribute this software.  NEITHER 
#  THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES 
#  ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY 
#  FOR THE USE OF THIS SOFTWARE.  If software is modified to 
#  produce derivative works, such modified software should be 
#  clearly marked, so as not to confuse it with the version 
#  available from LANL.
#
#  Additionally, redistribution and use in source and binary 
#  forms, with or without modification, are permitted provided 
#  that the following conditions are met:
#  -  Redistributions of source code must retain the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer. 
#  -  Redistributions in binary form must reproduce the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer in the documentation 
#     and/or other materials provided with the distribution. 
#  -  Neither the name of Los Alamos National Security, LLC, 
#     Los Alamos National Laboratory, LANL, the U.S. Government, 
#     nor the names of its contributors may be used to endorse 
#     or promote products derived from this software without 
#     specific prior written permission.
#   
#  THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC 
#  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
#  IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR CONTRIBUTORS 
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
#  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
#  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
#  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
#  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
#  OF SUCH DAMAGE.
#
#  ###################################################################

# Script used to continually "fill" up a compute segment with a suite of tests
# original author: Craig Idler
  
use POSIX;
use Cwd 'abs_path';
use File::Basename;
use Getopt::Std;
# Example usage and meaning: 

# "nohup pav_testMgr -C my_test_suite.yaml -D 30 -w 4 &"
#
# - Submit a new set of jobs defined by the test suite every 30 minutes,
#   only if less than 4 of my jobs already queued or running. 

unless (exists( $ENV{PVINSTALL})) {
  print "ERROR: No env variable PVINSTALL set, exiting!\n";
  exit;
}
my $PH = $ENV{PVINSTALL};
unless (exists($ENV{PATH})) {
  $ENV{PATH}="$PH/PAV:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:.";
}
$ENV{G}="$PH";
my $USER = $ENV{USER};

my $pwd = dirname(abs_path("$0")); chomp($pwd);

use strict;
my $log = "$ENV{PV_LOG}/pv_testMgr.log.$USER";
my $me = `whoami`; chop $me;
my $count = 1;
our $secs_to_wait;
our $when;
our $to;

our %opt;
$opt{f} = "";
$opt{p} = "";
$opt{D} = "";
$opt{C} = "";
&getopts("w:m:p:C:D:dkhf", \%opt);

our %testDefinitionLine = ();
our %nodes2fill = ();

if ($opt{h}) {
  print "Usage: $0 [-D #] -C test_suite-name [-w #] \n";
  print "\tDispatch tests to system\n\n";
  print "\t-h print this Help message\n";
  print "\t-C use this test suite file.\n";
  print "\t-d debug mode, show what would happen but do not submit any tests\n";
  print "\t-D continuous mode, retry after Delaying this many minutes. Otherwise run once.\n";
  print "\t-f force next test suite to run without checking what's currently running\n";
  print "\t-k if an instance of $0 is running, kill it and run this new one.\n";
  print "\t-m send snapshot of results to e-mail,military-hour (ex. -m joe\@lanl.gov,14)\n";
  print "\t-w watermark. Don't submit if this many of my jobs running or queued. Default is 2\n";
  exit;
}

unless ($opt{C}) {
      print "No test suite provided, exiting!\n";
} else {
      print "Using test suite - $opt{C}\n";
}

# Check for a running instance of this test manager 
# and die unless the k option selected.
  my $mypid = $$;
  my $oldProcID = 0;
  my $info = `ps x | egrep $0 | egrep -v "grep|vi" | egrep -v $mypid`;
  if ($info =~ m/$0/) {
    # get the process id of the old process
    if ($info =~ /^\s+(\d+)\s/) { $oldProcID = $1; }
    # clean up old one
    if ( ($opt{k}) && ($oldProcID) ) {
      print "NOTICE - killing running version of $0 (process id $oldProcID)\n";
      `kill -9 $oldProcID`;
    } else {
      print "WARNING - instance of $0 is running, quitting!\n";
      exit;
    }
  }


# Flag to force test suite to be submitted regardless of
# existing running or queued jobs.
# Not applicable when using "p" option. 
my $check = 1;
if ( $opt{f} ) {
    $check = 0;
}

sub catch_alrm {
    # clear the alarm 
      alarm(0);
      print "alarm caught, sending mail to $to\n" if $opt{d};
    # perform the task
      my $from = $me;
      sendEmail( $to, $from);
    # reset the alarm
     $secs_to_wait = secs_till_event($when);
     alarm($secs_to_wait);
#     alarm(120);
}
$SIG{ALRM} = \&catch_alrm;

# mail snapshot of results if requested
if ( $opt{m} ) {
  ($to,$when) = split(/,/, $opt{m});
  if (( $when > 24 || $when < 0) ) {
    $when = 7;
  }
  $secs_to_wait = secs_till_event($when);
  print "secs to wait until $when: $secs_to_wait\n" if $opt{d};
  alarm($secs_to_wait);
  print "send result updates to $to at everyday @ $when\n";
}

# delay this many seconds before launching again (continous mode)
my $sleepTime = 0;
my $continuous = 0;
if ( $opt{D} ) {
    $sleepTime = $opt{D} * 60;
    unless ($opt{d}) { $continuous = 1; } # don't loop if in debug mode
    print "$0: Continuous mode, attempt to re-launch jobs after Delay of $opt{D} minutes\n";
} else {
    print "$0: No continuous mode, will return when all jobs launched\n";
}

# change the water wark (number of jobs queued or running) from the default
my $waterMark = 2;
if ( $opt{w} ) {
    $waterMark = $opt{w};
    print "$0: watermark set to $waterMark\n";
}

# log output each time it tries to launch
open( LOG, ">>", $log ) or die "can't open $log: $!\n";

# main loop
do {
      my $time = `date +%c`; chop $time;
      my $inUse = 999;


      # Check to see if jobs are queued or running
      # Sometimes this area needs to be tweaked to work on different archs.
      #$inUse = `mdiag -j | grep $me | wc -l`;
      $inUse = `squeue -u $me | wc -l`;
      $inUse -= 1;
      
      # If more than waterMark (-w) jobs running or queued try again later.
      # Used as a safety valve so that not to many will get stuffed 
      # into the scheduler.
      if ( ($check) && ( $inUse > ( $waterMark - 1)) ) {
        if ( $opt{d} ) {
	  print "debug: $time : no submission - plenty of jobs still running or queued\n";
        }
	print LOG " $time : no submission - plenty of jobs still running or queued\n";
      } else  {
        
          # Launch jobs in the normal way
          my $cmd;
          $cmd =  "pav run_test_suite ";
          $cmd =  $cmd . "./$opt{C} >> $log";

          if ( $opt{d} ) { print "debug: would launch -> $cmd\n"; }
          else {
            print LOG "$time, submit: $cmd\n";
  	    # submit the test suite. Should look somethin like:
            `$cmd`;
          }

      } 

  # we can only sleep after all the segments have been checked
    if ($continuous) { `sleep $sleepTime`; } 

    # Exit if flag file created -- allows another user using same PV_HOME to end testMgr.
    # Special file must be created manually by "other" user.
    # This is menat to be a special undocumented feature.
    my $exit_flag_file = "$ENV{'PV_LOG'}/pv_exit_testMgr";
    if (-e $exit_flag_file ) {
      $continuous = 0;
      unlink($exit_flag_file);
      if ($?) {
        print LOG "Warning!, pv_testMgr exiting but could not delete $exit_flag_file.\n";
        print     "Warning!, pv_testMgr exiting but could not delete $exit_flag_file.\n";
      } else {
        print LOG "pv_testMgr exiting because $exit_flag_file file found. $exit_flag_file deleted.\n";
        print     "pv_testMgr exiting because $exit_flag_file file found. $exit_flag_file deleted.\n";
      }
    }
} while ($continuous);

close (LOG);

# -- support subroutines -- 

# Simple function which e-mails a result snapsnot
sub sendEmail {
    my ($to, $from) = @_;
    my $sendmail = '/usr/sbin/sendmail';

    my $host = `hostname`;
    my $data = `$ENV{PVINSTALL}/PAV/pav get_results`;

    open(MAIL, "|$sendmail -oi -t");
    print MAIL "From: $from\n";
    print MAIL "To: $to\n";
    print MAIL "Subject: Pavilion result snanpshot from $host\n\n";
    print MAIL "$data\n";
    close(MAIL);
} 

sub secs_till_event {
  my $target_hr = shift;
  my $deltaHR;
  my $deltaMIN;
  my $deltaSEC;

  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);

#print "current time - hr: $hour, min: $min\n";

  # find delta seconds between now and selected time
   $hour = $hour + 1;
   if ($hour > $target_hr) {
     $deltaHR = (24 - $hour ) + $target_hr;
   } else {
     $deltaHR = ($target_hr - $hour );
   }
   $deltaMIN = (60 - $min );

  $deltaSEC = (($deltaHR * 60) + $deltaMIN ) * 60;
  return $deltaSEC;

}

# Calculate number of nodes each test name type should consume using
# the pct value (weighting factor) attached to each valid test suite line. 
# This algorithm lumps all tests of the same name together, not taking 
# into account different sizes or test parameters lists. 
sub calc_node_fill {
  my $test_suite = shift;
  my $idleNodes = shift;

  my %totalPct = ();
  my $totalPct = 0;
  my $pct;
  my $testName;
  my $nodeCnt;

  open (FILE,"$test_suite") || die "*** Unable to open test suite ($test_suite) for reading: $!\n";
  while ( <FILE> ) {
    next if (/^\s*#/);  # ignore commented lines
    next if (/^$/);  # ignore empty lines
    chomp;
    my $line = $_;
## debug line
#    print "read in  -> $line\n";
    if ( $line =~ /name:=([^\s]+).+nodes:=(\d+)/ ) {
      $testName = $1;
      $nodeCnt = $2;
      # save each test suite line in arrays saved in a hash by test name 
      push(@{$testDefinitionLine{$1}}, $line);
      if ( $line =~ /pct:=(\d+)/) { $pct = $1; } else { $pct = 25; }
      if (!exists $totalPct{$testName}) { $totalPct{$testName} = 0;}
      # just add up all the weighting factors, will normalize later
      $totalPct{$testName} = $totalPct{$testName} + $pct;
      $totalPct = $totalPct + $pct;
      # print "name = $testName, nodes - $nodeCnt pct - $pct\n";
    }
  }
#  print " *** test suite input complete ***\n\n";
  close(FILE);

  # calculate number of nodes to fill per test name
  my $normalizeFactor = 100 / $totalPct;
  foreach $testName ( keys (%totalPct) ) {
    $nodes2fill{$testName} = $idleNodes * ( ($totalPct{$testName} * $normalizeFactor) / 100 ); 
    if ( $opt{d} ) { print "$testName should fill $nodes2fill{$testName} nodes\n"; }
  }
}

exit;
